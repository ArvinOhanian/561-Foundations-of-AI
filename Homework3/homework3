import collections

def main():
    # Opening file
    file1 = open(r'C:\Users\arvin\Documents\Example.txt', 'r')
    content = file1.readlines()
    
    Algorithm_Type = content[0]
    
    int_content = Textlines_to_int(content[1:])
    Grid_Size = int_content[0]
    Start = int_content[1]
    End = int_content[2]
    num_nodes = int_content[3]
    all_nodes_and_vectors = int_content[4:]
    
    print(Algorithm_Type)
    print(Grid_Size)
    print(Start)
    print(End)
    print(num_nodes)
    print(all_nodes_and_vectors)
    
    file1.close()
    
    
    
#def bfs(final_dict, start)
        

def Move(Loc1, Loc2):#adds two lists element wise. Lists must be same dimenions and only one row
    Loc3 = []
    for i in range(0, len(Loc1)):
        Loc3.append(Loc1[i] + Loc2[i]) 
    return Loc3

def To_dir(coded_dir):#takes an encoded direction 1-18 and converts it to a direction vector corresponding to ruleset
    if(coded_dir == 1):
        vector = [1, 0, 0]
    elif(coded_dir == 2):
        vector = [-1, 0, 0]
    elif(coded_dir == 3):
        vector = [0, 1, 0]
    elif(coded_dir == 4):
        vector = [0, -1, 0]
    elif(coded_dir == 5):
        vector = [0, 0, 1]
    elif(coded_dir == 6):
        vector = [0, 0, -1]
    elif(coded_dir == 7):
        vector = [1, 1, 0]
    elif(coded_dir == 8):
        vector = [1, -1, 0]
    elif(coded_dir == 9):
        vector = [-1, 1, 0]
    elif(coded_dir == 10):
        vector = [-1, -1, 0]
    elif(coded_dir == 11):
        vector = [1, 0, 1]
    elif(coded_dir == 12):
        vector = [1, 0, -1]
    elif(coded_dir == 13):
        vector = [-1, 0, 1]
    elif(coded_dir == 14):
        vector = [-1, 0, -1]
    elif(coded_dir == 15):
        vector = [0, 1, 1]
    elif(coded_dir == 16):
        vector = [0, 1, -1]
    elif(coded_dir == 17):
        vector = [0, -1, 1]
    elif(coded_dir == 18):
        vector = [0, -1, -1]
    else:
        vector = [99, 99, 99]
    
    return vector

def Textlines_to_int(nodes):#takes a list of strings from input.txt and converts each line to int. returns int list of lists
    int_pos = []
    int_pos_val = []
    idx = 0
    next_num = 0
    num_size = 0
    big_num = ''
    for val in nodes:
        for char in val:
            if char.isdigit():
                num_size+=1
                 
            if char.isdigit() and val[idx+1].isdigit()==False:
                for chars in range(num_size):
                    big_num =  big_num + val[idx-num_size+1]
                    num_size-=1
                
                int_pos_val.append(int(big_num))
                big_num = ''
            idx+=1
        int_pos.append(int_pos_val)
        int_pos_val = []
        idx = 0
    return int_pos

def To_Dict(def_list):#takes an int list of lists and returns a dictionary with tuple keys reping points and values reping connected points
    temp_list = []
    final_dict = {}
    directions = []
    idx_count = 0
    for list in def_list:
        for val in list:
            if list.index(val) < 3 and idx_count < 3:
                temp_list.append(val)
                idx_count+=1
            
            elif idx_count > 2:
                directions.append(Move(To_dir(val), temp_list))
                
        temp_tup = tuple(temp_list)
        final_dict[temp_tup] = directions
        temp_list = []
        directions = []
        idx_count = 0
    return final_dict

     
if __name__ == '__main__':
    main()
